/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tcs.regrato.gui.region;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import com.tcs.jpath.modal.JConfig;
import com.tcs.regrato.event.ButtonHandler;
import com.tcs.regrato.gui.ProgressBar;
import com.tcs.regrato.gui.thread.CardFileRWThread;
import com.tcs.regrato.resources.CardFileNotSupportedException;
import com.tcs.regrato.resources.Path;
import com.tcs.regrato.resources.SSHSessionFactory;
import com.tcs.regrato.resources.SupportedCardFile;
import com.tcs.regrato.util.Comman;
import com.tcs.regrato.util.RegExLine;
import com.tcs.shellsch.ShellOutputStream;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import org.jsoup.nodes.Document;

/**
 *
 * @author 1299792
 */
public class CardOpener extends javax.swing.JDialog {

    /**
     * Creates new form IN0800CARD
     */
    private Path path;
    private String prevIN0800Line;
    private String defaultBranch;
    private Session controlSession;
    private String in0800CardFilePath;
    private String cardFile;
    private String cardFileLayout;
    private int   []lengthOfCard;

    public CardOpener(java.awt.Frame parent, boolean modal,String cardFile) {
        super(parent, modal);
        initComponents();
        path = new Path();
        SupportedCardFile sup = new SupportedCardFile();
        this.cardFile=cardFile;
        boolean isSup=false;
        try {
            isSup = sup.isSupportedCardFile(cardFile);
        } catch (IOException ex) {
            Logger.getLogger(CardOpener.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(isSup){
            try {
               
                try {
                    this.cardFileLayout = sup.getCardLayout(cardFile);
                    jLabelCardFileName.setText(this.cardFile+" File");  
                   
                    try{

                    onLoad("001"); 
                    CardFileRWThread thread = new CardFileRWThread("001",controlSession,cardFile,cardFileLayout,prevIN0800Line,lengthOfCard,jTabbedPane1);
                    thread.execute();
                    setEvent(); 
                    }catch(JSchException ex){
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(null, ex.getLocalizedMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                    }
                  
                } catch (CardFileNotSupportedException ex) {
                    JOptionPane.showMessageDialog(null,"CARD File Not Supported", "Error",JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(CardOpener.class.getName()).log(Level.SEVERE, null, ex);
                }

            } catch (IOException ex) {
                Logger.getLogger(CardOpener.class.getName()).log(Level.SEVERE, null, ex);
            }

//        try {
//            onLoad("001");

//         } catch (IOException ex) {
//             Logger.getLogger(CardOpener.class.getName()).log(Level.SEVERE, null, ex);
//         }
        
//          dispose();
        }else{
                   JOptionPane.showMessageDialog(null,"CARD File Not Supported", "Error",JOptionPane.ERROR_MESSAGE);

        }
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelCardFileName = new javax.swing.JLabel();
        jButtonSaveChanges = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxInstitution = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Card File");

        jLabelCardFileName.setText("    ");

        jButtonSaveChanges.setText("Save");

        jLabel2.setText("Control Region ");

        jLabel1.setText("Institution");

        jComboBoxInstitution.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "001", "002" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonSaveChanges))
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelCardFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jComboBoxInstitution, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 97, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCardFileName)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxInstitution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSaveChanges)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSaveChanges;
    private javax.swing.JComboBox<String> jComboBoxInstitution;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelCardFileName;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
 private void onLoad(String inst) throws IOException, JSchException{
     JConfig c = new JConfig();
     Comman comman = new Comman();
     comman.deleteTemp();
     File tableLayoutFile = new File(Path.LAYOUT+File.separator+this.cardFileLayout);
     ShellOutputStream inputRead = new ShellOutputStream();
     InputStream readStream = new FileInputStream(tableLayoutFile);
     String []tableCol=inputRead.readFile(readStream).toString().split("\r\n");
     int length = 0;
     int actualLength = tableCol.length;
     length = actualLength / 2;
     this.lengthOfCard = new int[length];

     this.controlSession = SSHSessionFactory.getSSHSession(c.getBranches().getBranches().get(0),"C");
     String filePath = null;
     try{
     filePath=path.getPath(controlSession,this.cardFile,inst);
     }catch(JSchException ex){
      throw new JSchException(ex.getLocalizedMessage());
     }
     this.in0800CardFilePath=filePath;
     int len=0;
     for(int j=length;j<actualLength;j++){
          this.lengthOfCard[len]=Integer.parseInt(tableCol[j]);
          len = len + 1;
     }      
//     ShellOutputStream inputRead = new ShellOutputStream();
//     RegExLine reg = new RegExLine();
//     String branch=c.getBranches().getBranches().get(0);
//     this.defaultBranch=branch;
//     controlSession = SSHSessionFactory.getSSHSession(branch, "C");
//     String filePath = path.getPath(controlSession,this.cardFile,inst);
//     this.in0800CardFilePath=filePath;
//     ShellOutputStream s = new ShellOutputStream();
//        try {
//            ChannelSftp sftp =  (ChannelSftp)controlSession.openChannel("sftp");
//            sftp.connect();
//            InputStream stream = sftp.get(filePath);
//            StringBuffer buffer =  s.readFile(stream);
//            File in0800cardTemp = new File(Path.TEMP_PATH+File.separator+this.cardFile);
////            new Comman().writeStringInFile(in0800cardTemp, buffer.toString(),false);
//            s.writeFile(buffer.toString(), new FileOutputStream(in0800cardTemp));
//            String line = reg.forIN0880Card(in0800cardTemp.getPath());
//            String []details = line.split(" ");
//            this.prevIN0800Line=line;
//            File tableLayoutFile = new File(Path.LAYOUT+File.separator+this.cardFileLayout);
//           
//            InputStream readStream = new FileInputStream(tableLayoutFile);
//            String []tableCol=inputRead.readFile(readStream).toString().split("\r\n");
//            int length = 0;
//            int actualLength = tableCol.length;
//            length = actualLength / 2;
////            for(String s1:tableCol){
////               if(s1.matches("[0-9]")==false){
////                   length = length + 1;
////               }else{
////                break;
////               }
////            }
//            this.lengthOfCard = new int[length];
//            int len=0;
//            for(int j=length;j<actualLength;j++){
//                this.lengthOfCard[len]=Integer.parseInt(tableCol[j]);
//                len = len + 1;
//            }
//            Object [][]rowData = new Object[1][length];
//            Object []colData = new Object[length];
//            int i=0;
//            for(String row:details){
//              if(row.equals("")==false){
//                 rowData[0][i]=row;
//                   i=i+1;
//              }
//              
//            }
//            i=0;
//            for(i=0;i<length;i++){
//               colData[i]=tableCol[i];
//            }
////            for(String col:tableCol){
////               colData[i]=col;
////
////               i=i+1;
////            }
//            JTable table = new JTable(rowData, colData);
//            
//            JScrollPane scrolPane = new JScrollPane(table);
//         
//            this.jTabbedPane1.addTab(this.cardFile,scrolPane);
//
//        } catch (JSchException ex) {
//            Logger.getLogger(CardOpener.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (SftpException ex) {
//            Logger.getLogger(CardOpener.class.getName()).log(Level.SEVERE, null, ex);
//        }

 }
 private void setEvent(){
  jButtonSaveChanges.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
          boolean error=false;
         prevIN0800Line=jTabbedPane1.getName();
        String errorMessage = "";
       ShellOutputStream s = new ShellOutputStream();
       JScrollPane pane =   (JScrollPane)jTabbedPane1.getComponent(0);
       JTable table =   (JTable)pane.getViewport().getComponent(0);
       int col =  table.getColumnCount();
       int row = table.getRowCount();
       String newLine="                ";
       for(int i=0;i<col;i++){
          String value = (String)table.getValueAt(0, i);
            if(value==null){
              value ="";
            }
            int len = value.length();
            if(len!=lengthOfCard[i]){
                String message = "Length is not same at " +table.getColumnName(i);   
                JOptionPane.showMessageDialog(null, message, "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(cardFile.equals("IN0800.card") || cardFile.equals("AM2000.card") || cardFile.equals("IN9001.card")){
            if(i==col-1){
                newLine=newLine+"  "+value;
            }else{
               newLine=newLine+" "+value;
            }
            }else {
              newLine=newLine+" "+value;
            }
       }
          try {
              String in0800path = Path.TEMP_PATH+File.separator + cardFile;
              StringBuffer buf=s.readFile(new FileInputStream(in0800path));
              String temp = buf.toString();
              temp =  temp.replaceAll(prevIN0800Line, newLine);
//              s.writeFileBackToServer(temp, new FileOutputStream(in0800path));
              ChannelSftp sftp=(ChannelSftp)controlSession.openChannel("sftp");
              sftp.connect();
              OutputStream stream = sftp.put(in0800CardFilePath);
              s.writeFile(temp, stream);
              JOptionPane.showMessageDialog(null,"Changed", "Success", JOptionPane.INFORMATION_MESSAGE);
          } catch (IOException ex) {
              Logger.getLogger(CardOpener.class.getName()).log(Level.SEVERE, null, ex);
              errorMessage = ex.getLocalizedMessage();
              error=true;
            //  JOptionPane.showMessageDialog(null,ex.getLocalizedMessage(), "Failed", JOptionPane.ERROR_MESSAGE);
          } catch (JSchException ex) {
              Logger.getLogger(CardOpener.class.getName()).log(Level.SEVERE, null, ex);
              errorMessage=ex.getLocalizedMessage();
               error=true;
          } catch (SftpException ex) {
              Logger.getLogger(CardOpener.class.getName()).log(Level.SEVERE, null, ex);
              errorMessage=ex.getLocalizedMessage();
               error=true;
          }
          if(error){
            JOptionPane.showMessageDialog(null,errorMessage, "Failed", JOptionPane.ERROR_MESSAGE);
          }
          
      }
  });
    jComboBoxInstitution.addItemListener(new ItemListener() {
      @Override
      public void itemStateChanged(ItemEvent e) {

        if(e.getStateChange()==ItemEvent.COMPONENT_EVENT_MASK){
          String inst =  (String) e.getItem();

                jTabbedPane1.removeTabAt(0);
                jTabbedPane1.revalidate();
//                onLoad(inst);
                CardFileRWThread thread = new CardFileRWThread(inst,controlSession,cardFile,cardFileLayout,prevIN0800Line,lengthOfCard,jTabbedPane1);
                thread.execute();

        }

      }
  });
 }


  
 
}
