/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tcs.regrato.gui.region;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import com.tcs.jpath.modal.JConfig;
import com.tcs.regrato.event.ButtonHandler;
import com.tcs.regrato.modal.ExtractMapperModal;
import com.tcs.regrato.modal.RemoteFileSystemModal;
import com.tcs.regrato.resources.AppIcon;
import com.tcs.regrato.resources.Path;
import com.tcs.regrato.resources.SSHSessionFactory;
import com.tcs.regrato.util.Comman;
import com.tcs.shellsch.ShellOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.JOptionPane;

/**
 *
 * @author 1299792
 */
public class ExtractReader extends javax.swing.JFrame {

    /**
     * Creates new form ExtractReader
     */
    private String extractPath;
    private String mapperPath;
    private ExtractMapperModal mo;
    private org.apache.log4j.Logger log;
    public ExtractReader(String exString,String maString) {
        initComponents();
        this.log = new Comman().getLogger();
        this.extractPath =exString;
        this.mapperPath  = maString;
        this.mo = ExtractMapperModal.getExtractMapperModal();
        setProperty();
        setEvent();
        onLoad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaOneLineAtATime = new javax.swing.JTextArea();
        jButtonCreate = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldTotalLineNumber = new javax.swing.JTextField();
        jTextFieldCurrentLine = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabelLocalExtractPath = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabelMapperPAth = new javax.swing.JLabel();
        jProgressBarShowReadMappingProgress = new javax.swing.JProgressBar();
        jTabbedPaneMapperPane = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextAreaOneLineAtATime.setColumns(20);
        jTextAreaOneLineAtATime.setRows(5);
        jScrollPane1.setViewportView(jTextAreaOneLineAtATime);

        jButtonCreate.setText("Create");
        jButtonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateActionPerformed(evt);
            }
        });

        jLabel2.setText("of");

        jTextFieldTotalLineNumber.setText("Loading Total Number of Line");
        jTextFieldTotalLineNumber.setEnabled(false);

        jTextFieldCurrentLine.setText("0");

        jLabel3.setText("Extract Path :");

        jLabelLocalExtractPath.setText(" ");

        jLabel1.setText("Mapper Path :");

        jLabelMapperPAth.setText(" ");

        jProgressBarShowReadMappingProgress.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPaneMapperPane)
                    .addComponent(jProgressBarShowReadMappingProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelMapperPAth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 958, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jTextFieldCurrentLine, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldTotalLineNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jButtonCreate)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelLocalExtractPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(79, 79, 79))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabelLocalExtractPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelMapperPAth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCurrentLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldTotalLineNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreate))
                .addGap(10, 10, 10)
                .addComponent(jProgressBarShowReadMappingProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jTabbedPaneMapperPane, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonCreateActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ExtractReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ExtractReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ExtractReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ExtractReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//    
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCreate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelLocalExtractPath;
    private javax.swing.JLabel jLabelMapperPAth;
    private javax.swing.JProgressBar jProgressBarShowReadMappingProgress;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPaneMapperPane;
    private javax.swing.JTextArea jTextAreaOneLineAtATime;
    private javax.swing.JTextField jTextFieldCurrentLine;
    private javax.swing.JTextField jTextFieldTotalLineNumber;
    // End of variables declaration//GEN-END:variables

private void setProperty(){
    setIconImage(new AppIcon().getAppIcon());
    jLabelLocalExtractPath.setText(extractPath);
    jLabelMapperPAth.setText(mapperPath);
    mo.setCurrentLine(jTextFieldCurrentLine);
//    jTableMapper.getTableHeader().setReorderingAllowed(false);
//    mo.setFieldToMapMapping(jTableMapper);
}

private void setEvent(){
    ButtonHandler handler = new ButtonHandler();
    jButtonCreate.setActionCommand("mapFileWithMap");
    jButtonCreate.addActionListener(handler);
    JTextFieldLimit limit = new JTextFieldLimit(Integer.MAX_VALUE);
    jTextFieldCurrentLine.setDocument(limit);
    jProgressBarShowReadMappingProgress.setStringPainted(true);
    jProgressBarShowReadMappingProgress.setString("Reading ...");
    jProgressBarShowReadMappingProgress.setIndeterminate(true);
    jProgressBarShowReadMappingProgress.setVisible(false);
    mo.setTabbedPane(jTabbedPaneMapperPane);
    mo.setOneLineAtATime(jTextAreaOneLineAtATime);
    mo.setTotalLineNumber(jTextFieldTotalLineNumber);
    mo.setProgressBar(jProgressBarShowReadMappingProgress);
//    mo.setIsDelCompobox(isDelCompobox);
}
private void onLoad(){
 new Runnable() {
     @Override
     public void run() {
         String errorMessage = null;
         try {
             
             String mode = ((String)RemoteFileSystemModal.getRemoteFileSystemModal().getMode().getSelectedItem()).substring(0, 1);
             Session session = SSHSessionFactory.getSSHSession(new JConfig().getBranches().getBranches().get(0),mode);
             ChannelSftp  sftp =     (ChannelSftp)session.openChannel("sftp");
             sftp.connect();
             ShellOutputStream output = new ShellOutputStream();
             String textContent =  output.execOutputStream(sftp.get(extractPath), true);
             File saveToTempFile = new File(Path.TEMP_PATH+File.separator+"temp.txt");
             saveToTempFile.delete();
             output.writeFile(textContent, saveToTempFile, true);
             try (Stream<String> lines = Files.lines(saveToTempFile.toPath(), Charset.defaultCharset())) {
              jTextFieldTotalLineNumber.setText(Long.toString(lines.count()));
            } catch (IOException ex) {
                errorMessage = ex.getLocalizedMessage();
                log.error(ExtractReader.class.getName() + ex);
                Logger.getLogger(ExtractReader.class.getName()).log(Level.SEVERE, null, ex);
            }
         } catch (JSchException ex) {
             errorMessage = ex.getLocalizedMessage();
             log.error(ExtractReader.class.getName() + ex);
             Logger.getLogger(ExtractReader.class.getName()).log(Level.SEVERE, null, ex);
         } catch (SftpException ex) {
             errorMessage = ex.getLocalizedMessage();
             log.error(ExtractReader.class.getName() + ex);
             Logger.getLogger(ExtractReader.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IOException ex) {
              errorMessage = ex.getLocalizedMessage();
             log.error(ExtractReader.class.getName() + ex);
             Logger.getLogger(ExtractReader.class.getName()).log(Level.SEVERE, null, ex);
         }
         if(errorMessage!=null){
             JOptionPane.showMessageDialog(null, errorMessage, AppIcon.APP_NAME,JOptionPane.ERROR_MESSAGE);
         }
         
         
     }
 }.run();

}
    public String getExtractPath() {
        return extractPath;
    }

    public void setExtractPath(String extractPath) {
        this.extractPath = extractPath;
    }

    public String getMapperPath() {
        return mapperPath;
    }

    public void setMapperPath(String mapperPath) {
        this.mapperPath = mapperPath;
    }

}
